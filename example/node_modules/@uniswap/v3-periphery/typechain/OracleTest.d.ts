/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OracleTestInterface extends ethers.utils.Interface {
  functions: {
    "consult(address,uint32)": FunctionFragment;
    "getBlockStartingTickAndLiquidity(address)": FunctionFragment;
    "getGasCostOfConsult(address,uint32)": FunctionFragment;
    "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)": FunctionFragment;
    "getOldestObservationSecondsAgo(address)": FunctionFragment;
    "getQuoteAtTick(int24,uint128,address,address)": FunctionFragment;
    "getWeightedArithmeticMeanTick(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "consult",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockStartingTickAndLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfConsult",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetQuoteAtTick",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOldestObservationSecondsAgo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAtTick",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightedArithmeticMeanTick",
    values: [{ tick: BigNumberish; weight: BigNumberish }[]]
  ): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockStartingTickAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfConsult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOldestObservationSecondsAgo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeightedArithmeticMeanTick",
    data: BytesLike
  ): Result;

  events: {};
}

export class OracleTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OracleTestInterface;

  functions: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "consult(address,uint32)"(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
    }>;

    "getBlockStartingTickAndLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
    }>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getGasCostOfConsult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      secondsAgo: number;
      currentTimestamp: number;
      0: number;
      1: number;
    }>;

    "getOldestObservationSecondsAgo(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      secondsAgo: number;
      currentTimestamp: number;
      0: number;
      1: number;
    }>;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<{
      quoteAmount: BigNumber;
      0: BigNumber;
    }>;

    "getQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<{
      quoteAmount: BigNumber;
      0: BigNumber;
    }>;

    getWeightedArithmeticMeanTick(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanWeightedTick: number;
      0: number;
    }>;

    "getWeightedArithmeticMeanTick(tuple[])"(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanWeightedTick: number;
      0: number;
    }>;
  };

  consult(
    pool: string,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    arithmeticMeanTick: number;
    harmonicMeanLiquidity: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  "consult(address,uint32)"(
    pool: string,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    arithmeticMeanTick: number;
    harmonicMeanLiquidity: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  getBlockStartingTickAndLiquidity(
    pool: string,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: BigNumber;
  }>;

  "getBlockStartingTickAndLiquidity(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: BigNumber;
  }>;

  getGasCostOfConsult(
    pool: string,
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfConsult(address,uint32)"(
    pool: string,
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostOfGetQuoteAtTick(
    tick: BigNumberish,
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)"(
    tick: BigNumberish,
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOldestObservationSecondsAgo(
    pool: string,
    overrides?: CallOverrides
  ): Promise<{
    secondsAgo: number;
    currentTimestamp: number;
    0: number;
    1: number;
  }>;

  "getOldestObservationSecondsAgo(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<{
    secondsAgo: number;
    currentTimestamp: number;
    0: number;
    1: number;
  }>;

  getQuoteAtTick(
    tick: BigNumberish,
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getQuoteAtTick(int24,uint128,address,address)"(
    tick: BigNumberish,
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWeightedArithmeticMeanTick(
    observations: { tick: BigNumberish; weight: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<number>;

  "getWeightedArithmeticMeanTick(tuple[])"(
    observations: { tick: BigNumberish; weight: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "consult(address,uint32)"(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
    }>;

    "getBlockStartingTickAndLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
    }>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfConsult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      secondsAgo: number;
      currentTimestamp: number;
      0: number;
      1: number;
    }>;

    "getOldestObservationSecondsAgo(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      secondsAgo: number;
      currentTimestamp: number;
      0: number;
      1: number;
    }>;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightedArithmeticMeanTick(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<number>;

    "getWeightedArithmeticMeanTick(tuple[])"(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "consult(address,uint32)"(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockStartingTickAndLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfConsult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOldestObservationSecondsAgo(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightedArithmeticMeanTick(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWeightedArithmeticMeanTick(tuple[])"(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "consult(address,uint32)"(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockStartingTickAndLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfConsult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOldestObservationSecondsAgo(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuoteAtTick(int24,uint128,address,address)"(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeightedArithmeticMeanTick(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWeightedArithmeticMeanTick(tuple[])"(
      observations: { tick: BigNumberish; weight: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
