/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WeightedOracleTestInterface extends ethers.utils.Interface {
  functions: {
    "consult(address,uint32)": FunctionFragment;
    "getArithmeticMeanTickWeightedByLiquidity(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "consult",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArithmeticMeanTickWeightedByLiquidity",
    values: [
      {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArithmeticMeanTickWeightedByLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export class WeightedOracleTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WeightedOracleTestInterface;

  functions: {
    consult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      observation: {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
        0: number;
        1: BigNumber;
      };
      0: {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
        0: number;
        1: BigNumber;
      };
    }>;

    "consult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      observation: {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
        0: number;
        1: BigNumber;
      };
      0: {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
        0: number;
        1: BigNumber;
      };
    }>;

    getArithmeticMeanTickWeightedByLiquidity(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanWeightedTick: number;
      0: number;
    }>;

    "getArithmeticMeanTickWeightedByLiquidity(tuple[])"(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanWeightedTick: number;
      0: number;
    }>;
  };

  consult(
    pool: string,
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    arithmeticMeanTick: number;
    harmonicMeanLiquidity: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  "consult(address,uint32)"(
    pool: string,
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    arithmeticMeanTick: number;
    harmonicMeanLiquidity: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  getArithmeticMeanTickWeightedByLiquidity(
    observations: {
      arithmeticMeanTick: BigNumberish;
      harmonicMeanLiquidity: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<number>;

  "getArithmeticMeanTickWeightedByLiquidity(tuple[])"(
    observations: {
      arithmeticMeanTick: BigNumberish;
      harmonicMeanLiquidity: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    consult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "consult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    getArithmeticMeanTickWeightedByLiquidity(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<number>;

    "getArithmeticMeanTickWeightedByLiquidity(tuple[])"(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    consult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "consult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArithmeticMeanTickWeightedByLiquidity(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getArithmeticMeanTickWeightedByLiquidity(tuple[])"(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "consult(address,uint32)"(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArithmeticMeanTickWeightedByLiquidity(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getArithmeticMeanTickWeightedByLiquidity(tuple[])"(
      observations: {
        arithmeticMeanTick: BigNumberish;
        harmonicMeanLiquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
